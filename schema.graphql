# erc20 transfer
type Owner @entity {
  id: ID!
  balance: BigInt!
}

type ERC20Transfer @entity {
  id: ID!
  from: Owner
  to: Owner
  amount: BigInt!
  timestamp: DateTime!
  block: Int!
  currencyId: String @index
}

# currency transfer
type Account @entity {
  "Account address"
  id: ID!
  transfersTo: [Transfer!] @derivedFrom(field: "to")
  transfersFrom: [Transfer!] @derivedFrom(field: "from")
}

type Transfer @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  from: Account!
  to: Account!
  amount: BigInt! @index
  fee: BigInt! # fee is calculated at the best effort and may be zero for some old extrinsics
}

type EthTransaction @entity {
  hash: String! @index
  nonce: Int!
  blockHash: String
  blockNumber: EthBlock
  transactionIndex: Int
  from: String!
  to: String!
  value: String
  gasPrice: String
  gas: Int
  input: String
}

type EthBlock @entity {
  number: Int @index
  hash: String @index
  parentHash: String!
  baseFeePerGas: Int
  nonce: String
  sha3Uncles: String!
  logsBloom: String
  transactionsRoot: String!
  stateRoot: String
  miner: String
  difficulty: String
  totalDifficulty: String
  extraData: String
  size: Int
  gasLimit: Int
  gasUsed: Int
  timestamp: Int
  transactions: [EthTransaction] @derivedFrom(field: "blockNumber")
  uncles: [String]
}
